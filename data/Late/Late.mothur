###########################################################################
# Set pipelines/P-M16S/data/Late directory
set.dir(output=pipelines/P-M16S/data/Late/)
###########################################################################

###########################################################################
# Take forward and reverse sequences, complement reverse, make contigs
make.contigs(file=pipelines/P-M16S/data/Late/Late.files, processors=8)
#summary.seqs(fasta=Late.trim.contigs.fasta, processors=8)
###########################################################################

###########################################################################
# Denoising
#
# Step 1: Remove sequences that are longer than 16S region
#         Remove sequences that have ambiguous bases
screen.seqs(fasta=current, group=pipelines/P-M16S/data/Late/Late.contigs.groups, summary=current, maxambig=0, maxlength=275)
# Step 2: Remove duplicate sequences
unique.seqs(fasta=current)
# Step 3: For each sequence, count the number of groups in which it belongs
count.seqs(name=current, group=current)
#summary.seqs(count=current)
# Step 4: Align to Reference Database
#    a. Simplify reference pipelines/P-M16S/database to only use our region
#       TMC -- since this will differ for every run, I generalized it and left this out
#       Output is the same, I have verified it
#pcr.seqs(fasta=/biorg/pipelines/P-M16S/data/Stability/silva.bacteria.fasta, start=11894, end=25319, keepdots=F, processors=8)
#pcr.seqs(fasta=/biorg/pipelines/P-M16S/data/Stability/silva.bacteria.fasta, keepdots=F, processors=8)
#system(cp pipelines/P-M16S/data/Late/silva.bacteria.pcr.fasta pipelines/P-M16S/data/Late/silva.v4.fasta)
#summary.seqs(fasta=silva.v4.fasta)
#    b. Align to simplified reference pipelines/P-M16S/database
#align.seqs(fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.fasta, reference=pipelines/P-M16S/data/Late/silva.v4.fasta)
align.seqs(fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.fasta, reference=pipelines/P-M16S/input/silva.bacteria.fasta)
summary.seqs(fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.align, count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.count_table)
# Step 5: Remove sequences that do not align to the same region (TMC I believe this will differ between runs)a
screen.seqs(fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.align, count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.count_table, summary=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.summary, start=13862, end=23444, maxhomop=8)
#summary.seqs(fasta=Late.trim.contigs.good.unique.good.align, count=Late.trim.contigs.good.good.count_table)
# Step 6: Remove extra terminal nucleotides and gaps
filter.seqs(fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.align, vertical=T, trump=.)
# Step 7: Be sure sequences are still unique after the alignment
unique.seqs(fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.fasta, count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.good.count_table)
# Step 8: Count sequences with two or fewer differences as the same, remove one of them
pre.cluster(fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.fasta, count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.count_table, diffs=2)
# Step 9: Remove known chimeric sequences
# NOTE: Depending on the release of vsearch this can be slightly different than the tutorial.  Should be a *minimal* (no more than a few sequences) difference
chimera.vsearch(fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.count_table, dereplicate=t)
remove.seqs(fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.fasta, accnos=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.accnos)
# Step 10: Remove any sequences that are not bacteria
# TMC NOTE: The newer Mothur will automatically generate pipelines/P-M16S/data/Late files in the same folder as the pipelines/P-M16S/databases
# And it's not controllable through set.dir.  Thus -- you need the reference and taxonomy in your local folder now
classify.seqs(fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, reference=pipelines/P-M16S/input/trainset9_032012.pds.fasta, taxonomy=pipelines/P-M16S/input/trainset9_032012.pds.tax, cutoff=80)
remove.lineage(fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, taxonomy=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota)
#summary.tax(taxonomy=current, count=current)
# Step 11: Separate abundant and rare sequences (TMC leaving out)
#split.abund(fasta=Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=Late.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.count_table, cutoff=1)
#summary.seqs(fasta=Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.abund.fasta, count=Late.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.abund.count_table, processors=8)
###########################################################################

###########################################################################
# Check error rates
#get.groups(count=current, fasta=current, groups=Mock)
#seq.error(fasta=current, reference=/biorg/pipelines/P-M16S/data/Stability/HMP_MOCK.v35.fasta, aligned=F)
###########################################################################


###########################################################################
# Cluster
#
# 1. Bin based on taxonomy (This goes based on Order)
remove.groups(count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, taxonomy=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.taxonomy, groups=Mock)
cluster.split(fasta=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.fasta, count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, taxonomy=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.taxonomy, splitmethod=classify, taxlevel=4, cutoff=0.03)
# 2. Count sequences in each OTU
#make.shared(list=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.opti_mcc.unique_list.list, count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, label=0.03)
system(cp pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.opti_mcc.unique_list.list pipelines/P-M16S/data/Late/Late.unique_list.list)
make.shared(list=pipelines/P-M16S/data/Late/Late.unique_list.list, count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, label=0.03)
system(cp pipelines/P-M16S/data/Late/Late.unique_list.shared pipelines/P-M16S/data/Late/Late.shared)
###########################################################################


###########################################################################
# 3. Labeling
#classify.otu(list=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.opti_mcc.unique_list.list, count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, taxonomy=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.taxonomy, label=0.03)
classify.otu(list=pipelines/P-M16S/data/Late/Late.unique_list.list, count=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.pick.count_table, taxonomy=pipelines/P-M16S/data/Late/Late.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.taxonomy, label=0.03)
system(cp pipelines/P-M16S/data/Late/Late.unique_list.0.03.cons.taxonomy pipelines/P-M16S/data/Late/Late.taxonomy)
###########################################################################





